openapi: 3.1.0
info:
    title: BileMo API
    description: API for managing customers, users, and products
    version: 1.0.0
servers:
    - url: /api
      description: API server

components:
    schemas:
        Error:
            type: object
            properties:
                error:
                    type: array
                    items:
                        type: string
                    examples: ["User not found"]
        User:
            type: object
            properties:
                id:
                    type: integer
                    examples: [1]
                email:
                    type: string
                    format: email
                    examples: ["user@example.com"]
                roles:
                    type: array
                    items:
                        type: string
                    examples: [["ROLE_USER"]]
                customer_id:
                    type: integer
                    examples: [42]
        Product:
            type: object
            properties:
                id:
                    type: integer
                    examples: [1]
                name:
                    type: string
                    examples: ["Product name"]
        Pagination:
            type: object
            properties:
                current_page:
                    type: integer
                    examples: [1]
                per_page:
                    type: integer
                    examples: [10]
                total_items:
                    type: integer
                    examples: [100]
                total_pages:
                    type: integer
                    examples: [10]
        Links:
            type: object
            properties:
                self:
                    type: string
                    format: uri
                    examples: ["https://example.com/api/users/1"]
                first:
                    type: string
                    format: uri
                    examples: ["https://example.com/api/users?page=1"]
                last:
                    type: string
                    format: uri
                    examples: ["https://example.com/api/users?page=10"]
                previous:
                    type: string
                    format: uri
                    examples: ["https://example.com/api/users?page=1"]
                next:
                    type: string
                    format: uri
                    examples: ["https://example.com/api/users?page=3"]
        UserResponse:
            type: object
            properties:
                data:
                    $ref: '#/components/schemas/User'
                _links:
                    $ref: '#/components/schemas/Links'
        UsersResponse:
            type: object
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                meta:
                    $ref: '#/components/schemas/Pagination'
                _links:
                    $ref: '#/components/schemas/Links'
        ProductResponse:
            type: object
            properties:
                data:
                    $ref: '#/components/schemas/Product'
                _links:
                    $ref: '#/components/schemas/Links'
        ProductsResponse:
            type: object
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/Product'
                meta:
                    $ref: '#/components/schemas/Pagination'
                _links:
                    $ref: '#/components/schemas/Links'
        UserCreationRequest:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    format: email
                    examples: ["user@example.com"]
                password:
                    type: string
                    format: password
                    examples: ["securepassword"]

    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

paths:
    /users/{id}:
        get:
            summary: Get user linked to a customer
            description: Returns a specific user's details if the requester has access rights
            operationId: getUserLinkedToCustomer
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: User ID
            responses:
                '200':
                    description: User found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '401':
                    description: User not authenticated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '403':
                    description: User not authorized to access this resource
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /products/{id}:
        get:
            summary: Get product details
            description: Returns the details of a specific product
            operationId: getProduct
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: Product ID
            responses:
                '200':
                    description: Product found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductResponse'
                '404':
                    description: Product not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /customers/get-users:
        get:
            summary: Get all users linked to a customer
            description: Returns a paginated list of users belonging to the same customer as the authenticated user
            operationId: getCustomerUsers
            security:
                - bearerAuth: []
            parameters:
                - name: page
                  in: query
                  required: false
                  schema:
                      type: integer
                      default: 1
                  description: Page number for pagination
                - name: limit
                  in: query
                  required: false
                  schema:
                      type: integer
                      default: 10
                  description: Number of items per page
            responses:
                '200':
                    description: List of users retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsersResponse'
                '401':
                    description: User not authenticated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '403':
                    description: User does not have a customer
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /products:
        get:
            summary: Get all products
            description: Returns a paginated list of all products
            operationId: getAllProducts
            parameters:
                - name: page
                  in: query
                  required: false
                  schema:
                      type: integer
                      default: 1
                  description: Page number for pagination
                - name: limit
                  in: query
                  required: false
                  schema:
                      type: integer
                      default: 10
                  description: Number of items per page
            responses:
                '200':
                    description: List of products retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductsResponse'

    /users/{id}/delete:
        delete:
            summary: Delete a user linked to a customer
            description: Deletes a specific user if they exist and are linked to a customer
            operationId: deleteUserLinkedToCustomer
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: User ID to delete
            responses:
                '200':
                    description: User successfully deleted
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        examples: ["User successfully deleted"]
                '404':
                    description: User not found or not linked to a customer
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /customers/{id}/add-user:
        post:
            summary: Add a user to a customer
            description: Creates a new user and links them to the specified customer
            operationId: addUserToCustomer
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: Customer ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserCreationRequest'
            responses:
                '201':
                    description: User successfully created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '400':
                    description: Missing required fields
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: Customer not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '409':
                    description: User already exists
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
